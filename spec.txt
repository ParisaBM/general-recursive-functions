A program defines a function whose inputs are a list of natural numbers of fixed length whose ouptput is a single natural number. When the program executes the inputs are read from stdin, and the output is sent to stdout. Every line of a program contains a function definition. There must be a function named "main". No two function definions can define a function with the same name. The name of a function is case sensetive.

Function defintion has the form:
Identifier = Function

An identifier is a sequence of alphabetic characters, digits, and underscores. The first character cannot be a digit.

A function is a recursive expression that can be one of the following:

Identifier

Constant

suc

proj Constant Constant

rec(Function, Function)

comp(Function{,Function})

min(Function)

If a function is an identifier it means it is a function defined elsewhere. A Constant is a sequence of decimal digits. The next case defines a constant function whose arity is not specified. The constants after proj are the 0-based index of the returned arguement, then the number of arguements. For the 3 operators, every instance of a function is one of the arguements of that operator. Observe that all the components of general recursive functions are reflected in the syntax of a language. If the arity of named function can't be inferred, it is assumed to be the minimum possible arity. A function must be defined before it can be used.
Comments begin // and continue until the end of the line.

Spaces can be used as token seperators, but are ignored otherwise.

All errors are given with a description, and a line number. Only the first error found is generated.

Look at lcm.grf for an example program.
